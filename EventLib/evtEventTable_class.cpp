/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#include "evtEventTable.h"

namespace Evt
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Constructor.

EventTable::EventTable()
{
   reset();
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void EventTable::reset()
{
   for (int i = 0; i < cEvt_MaxNumEvents; i++)
   {
      mArray[i].reset();
   }
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Update the table with an event record. Return true if the table was
// updated. Return false if it was not. If this is for a type1 event then
// it is updated. If this is for a type2 event and the cstate or severity
// changed then it is updated.

bool EventTable::update(EventRecord* aEventRecord)
{
   EventTableRecord* tTableRecord = &mArray[aEventRecord->mEvtId];
   return tTableRecord->update(aEventRecord);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void EventTable::showRecord(int aEvtId, int aPF)
{
   mArray[aEvtId].show(aPF);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace